%D \module
%D   [       file=core-uti,
%D        version=2006.09.19,
%D          title=\CONTEXT\ Core Macros,
%D       subtitle=Utility File Handling,
%D         author=Hans Hagen,
%D           date=\currentdate,
%D      copyright={PRAGMA / Hans Hagen \& Ton Otten}]
%C
%C This module is part of the \CONTEXT\ macro||package and is
%C therefore copyrighted by \PRAGMA. See mreadme.pdf for
%C details.

\unprotect

\registerctxluafile{core-uti}{1.001}

%D We need a way to pass strings safely to \LUA\ without the
%D need for tricky escaping. Compare:
%D
%D \starttyping
%D \ctxlua {something("anything tricky can go here")}
%D \ctxlua {something([\luastringsep[anything tricky can go here]\luastringsep])}
%D \stoptyping

\def\luastringsep{===} % this permits \typefile{self} otherwise nested b/e sep problems

\edef\!!bs{[\luastringsep[}
\edef\!!es{]\luastringsep]}

%D We have a the following available as primitive so there is no need
%D for it:
%D
%D \starttyping
%D \long\edef\luaescapestring#1{\!!bs#1\!!es}
%D \stoptyping

% variables

\def\savecurrentvalue#1#2%
  {\ctxlua{jobvariables.save("\strippedcsname#1","#2")}}

% temp

\let\thisisbytesequence\gobbleoneargument

% wrong place but we need to have it someplace

\appendtoks
    \ctxlua{input.storage.dump()}%
\to \everydump

\appendtoks
    \ctxlua{input.storage.finalize()}%
\to \everyfinalizeluacode

\appendtoks
    \ctxlua{nodes.cleanup_reserved()}%
\to \everydump

% new

% this loads and also sets the saving

\appendtoks
    \ctxlua {
        job.comment(
            "file: \jobname",
            "format: \contextformat",
            "stamp: \contextversion",
            "escape: \!!bs\space...\space\!!es"
        )
        job.initialize("\jobname.tuc","\jobname.tua")
    }%
\to \everystarttext

\protect \endinput
