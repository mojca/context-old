%D \module
%D   [       file=core-spa,
%D        version=1997.03.31,
%D          title=\CONTEXT\ Core Macros,
%D       subtitle=Spacing,
%D         author=Hans Hagen,
%D           date=\currentdate,
%D      copyright={PRAGMA / Hans Hagen \& Ton Otten}]
%C
%C This module is part of the \CONTEXT\ macro||package and is
%C therefore copyrighted by \PRAGMA. See mreadme.pdf for
%C details.

\writestatus{loading}{Context Core Macros / Buffers}

\unprotect

% category:
%
% 0 == discard
% 1 == only if larger
% 2 == force even if smaller
% 3 == only take penalty component
% 4 == add to existing skip
% 5 == ignore following skips (== disable)

% penalty:
%
% larger wins

% order:
%
% larger wins

\defineattribute[kern-chars]

\defineattribute[skip-category]
\defineattribute[skip-penalty]
\defineattribute[skip-order]

\defineattribute[snap-category]

\defineattribute[display-math]

\registerctxluafile{core-spa}{1.001}

% \start \dosetstretch{.25em} \setuptolerance[tolerant,stretch] \input tufte \endgraf \stop
% \start \dosetstretch{.5em} effe flink doorfietsen \stop

\def\dosetstretch#1% to be interfaces
  {\relax\ifdim#1>\zeropoint
     \dosetattribute{kern-chars}{\number\dimexpr#1\relax}%
   \else
     \doresetattribute{kern-chars}%
   \fi}

\appendtoks\doresetattribute{kern-chars}\to\everyforgetall

\def\mksetupgridsnapping
  {\ctxlua{nodes.setsnapvalue(1,\number\openstrutheight,\number\openstrutdepth)}}

\def\mkenablegridsnapping
  {\dosetattribute{snap-category}{1}%
   \topskip\strutht
   \offinterlineskip}

\def\mkdisablegridsnapping
  {\doresetattribute{snap-category}%
   % reset topskip
   \oninterlineskip}

% experimental mirroring

\defineattribute[mirror]

\def\setcharactermirroring
  {\ctxlua{mirror.enabled=true}%
   \gdef\setcharactermirroring[##1]{\dosetattribute{mirror}{\number##1}}%
   \setcharactermirroring}

\def\resetcharactermirroring
  {\doresetattribute{mirror}}

\newtoks\everysetupdirections

\def\setupdirections[#1]% there will be more like setting up directions themselves
  {\getparameters[\??di][#1]%
   \the\everysetupdirections}

\chardef\directionsbidimode=0

\letvalue{\??di:bidi:\v!off   }\zerocount
\letvalue{\??di:bidi:\v!global}\plusone
\letvalue{\??di:bidi:\v!local }\plustwo
\letvalue{\??di:bidi:\v!on    }\plustwo

\appendtoks
    \chardef\directionsbidimode\executeifdefined{\??di:bidi:\@@dibidi}\zerocount\relax
    \ifcase\directionsbidimode
      \resetcharactermirroring
    \or
      \setcharactermirroring[1]% global, chars
    \or
      \setcharactermirroring[2]% local, attributes
    \or
      \setcharactermirroring[1]% default
    \fi
\to \everysetupdirections

% bidi: local=obey grouping, global=ignore grouping (unicode has no grouping)

\setupdirections % maybe start/stop
  [bidi=\v!off]

\unexpanded\def\bidilre{\utfchar{"0x202A}}
\unexpanded\def\bidirle{\utfchar{"0x202B}}
\unexpanded\def\bidipop{\utfchar{"0x202C}}
\unexpanded\def\bidilro{\utfchar{"0x202D}}
\unexpanded\def\bidirlo{\utfchar{"0x202E}}

\unexpanded\def\dirlre{\ifcase\directionsbidimode\or\bidilre\or\textdir TLT\fi}
\unexpanded\def\dirrle{\ifcase\directionsbidimode\or\bidirle\or\textdir TRT\fi}
\unexpanded\def\dirlro{\ifcase\directionsbidimode\or\bidilro\or\setcharactermirroring[3]\fi}
\unexpanded\def\dirrlo{\ifcase\directionsbidimode\or\bidirlo\or\setcharactermirroring[4]\fi}

% test at end of file

% for the moment: \setcharactermirroring[\plusone]

% experimental spacing
%
% test: oeps {\setcharacterspacing[frenchpunctuation]x: xx \bfd x: xx} oeps: test

\defineattribute[spacing]

\newcount \maxcharacterspacingid

\def\definecharacterspacing[#1]%
  {\ifcsname\??ch#1\endcsname \else
     \global\advance\maxcharacterspacingid\plusone
     \setxvalue{\??ch:#1}{\the\maxcharacterspacingid}%
   \fi}

\def\setupcharacterspacing
  {\dotripleargument\dosetupcharacterspacing}

\def\dosetupcharacterspacing[#1][#2][#3]%
  {\ifcsname\??ch:#1\endcsname
     \begingroup % for the moment we use modes, in ordere to avoid interface translation
     \getparameters[\??ch][\c!left=0,\c!right=0,\c!alternative=0,#3]%
     \ctxlua{spacings.setspacing(\getvalue{\??ch:#1},\number#2,\@@chleft,\@@chright,\@@chalternative)}%
     \endgroup
   \fi}

\def\setcharacterspacing
  {\ctxlua{spacings.enabled=true}%
   \gdef\setcharacterspacing[##1]{\dosetattribute{spacing}{\csname\??ch:##1\endcsname}}%
   \setcharacterspacing}

\def\resetcharacterspacing
  {\doresetattribute{spacing}}

\letvalue{\??ch:\s!reset}\minusone

% \setcharacterspacing[frenchpunctuation]
% «\type{bla}»\crlf « \type{bla}»\crlf
% «bla »\crlf « bla»\crlf « bla »\crlf
% bla: bla\crlf bla : bla

\definecharacterspacing [frenchpunctuation] % name may change / unit is em

\setupcharacterspacing [frenchpunctuation] ["003A] [\c!left =.25,\c!alternative=1] % : % strip preceding space(char)
\setupcharacterspacing [frenchpunctuation] ["003B] [\c!left =.25,\c!alternative=1] % ; % strip preceding space(char)
\setupcharacterspacing [frenchpunctuation] ["003F] [\c!left =.25,\c!alternative=1] % ? % strip preceding space(char)
\setupcharacterspacing [frenchpunctuation] ["0021] [\c!left =.25,\c!alternative=1] % ! % strip preceding space(char)
\setupcharacterspacing [frenchpunctuation] ["00AB] [\c!right=.25,\c!alternative=1] % guillemotleft/leftguillemot   % strip following space(char)
\setupcharacterspacing [frenchpunctuation] ["00BB] [\c!left =.25,\c!alternative=1] % guillemotright/rightguillemot % strip preceding space(char)

% more
%
% {\setcharacterkerning[extrakerning]\input davis\relax}

\defineattribute[kern]

\newcount \maxcharacterkerningid

\def\definecharacterkerning
  {\dosingleargument\dodefinecharacterkerning}

\def\dodefinecharacterkerning[#1]%
  {\ifcsname\??ck#1\endcsname \else
     \global\advance\maxcharacterkerningid\plusone
     \setxvalue{\??ck:#1}{\the\maxcharacterkerningid}%
   \fi}

\def\setupcharacterkerning
  {\dodoubleargument\dosetupcharacterkerning}

\def\dosetupcharacterkerning[#1][#2]%
  {\ifcsname\??ck:#1\endcsname
     \begingroup
     \getparameters[\??ck][\c!factor=0,#2]%
     \ctxlua{kerns.setspacing(\getvalue{\??ck:#1},\@@ckfactor)}%
     \endgroup
   \fi}

\def\setcharacterkerning
  {\ctxlua{kerns.enabled=true}%
   \gdef\setcharacterkerning[##1]{\dosetattribute{kern}{\csname\??ck:##1\endcsname}}%
   \setcharacterkerning}

\letvalue{\??ck:\s!reset}\minusone

\definecharacterkerning[extrakerning]

\setupcharacterkerning[extrakerning][\c!factor=.125]

% sorry, here:

% test \WORD{test TEST \TeX} test
% test \word{test TEST \TeX} test
% test \Word{test TEST \TeX} test

\defineattribute[case]

\def\setcharactercasing
  {\ctxlua{cases.enabled=true}%
   \gdef\setcharactercasing[##1]{\dosetattribute{case}{\number##1}}%
   \setcharactercasing}

\def\WORD {\groupedcommand{\setcharactercasing[\plusone  ]}{}}
\def\word {\groupedcommand{\setcharactercasing[\plustwo  ]}{}}
\def\Word {\groupedcommand{\setcharactercasing[\plusthree]}{}}
\def\Words{\groupedcommand{\setcharactercasing[\plusfour]}{}}

\let\WORDS\WORD
\let\words\word

% \definestartstop is not yet in available at core-spa time
%
% \startrandomized \input tufte \stoprandomized
%
% \definestartstop[randomized][\c!before=\dosetattribute{case}{8},\c!after=]

\def\randomizetext{\groupedcommand{\dosetattribute{case}{8}}{}}

% compound stuff (under construction)

\defineattribute[breakpoint]

\newbox\breakpointbox

\definesystemvariable {bp}   % BreakPoint

\exhyphenchar=\minusone % we use a different order then base tex, so we really need this

\newcount \maxbreakpointsid

\def\definebreakpoints
  {\dosingleargument\dodefinebreakpoints}

\def\dodefinebreakpoints[#1]%
  {\ifcsname\??bp:#1\endcsname \else
     \global\advance\maxbreakpointsid\plusone
     \setxvalue{\??bp:#1}{\the\maxbreakpointsid}%
   \fi}

\def\installbreakpoint
  {\dotripleempty\doinstallbreakpoint}

% hm, we cannot prebuild lists, font dependent

\def\doinstallbreakpoint[#1][#2][#3]%
  {\ifcsname\??bp:#1\endcsname
     \begingroup
     \getparameters[\??bp][\c!type=1,\c!nleft=3,\c!nright=3,#3]%
     \ctxlua{breakpoints.setreplacement(\csname\??bp:#1\endcsname,#2,\@@bptype,\@@bpnleft,\@@bpnright)}%
     \endgroup
   \fi}

\def\setbreakpoints
  {\ctxlua{breakpoints.enabled=true}%
   \gdef\setbreakpoints[##1]{\dosetattribute{breakpoint}{\csname\??bp:##1\endcsname}}%
   \setbreakpoints}

\letvalue{\??bp:\s!reset}\minusone

\definebreakpoints[compound]

\installbreakpoint [compound] [\number`+] [\c!left=3,\c!right=3,\c!type=1]
\installbreakpoint [compound] [\number`-] [\c!left=3,\c!right=3,\c!type=1]
\installbreakpoint [compound] [\number`/] [\c!left=3,\c!right=3,\c!type=1]
\installbreakpoint [compound] [\number`(] [\c!left=3,\c!right=3,\c!type=2]
\installbreakpoint [compound] [\number`)] [\c!left=3,\c!right=3,\c!type=3]

% \setbreakpoints[compound]

% experimental code, not yet interfaced:

% category:
% 0 == discard                             discard
% 1 == only if larger                      largest
% 2 == force even if smaller               force
% 3 == only take penalty component         penalty
% 4 == add to existing skip                add
% 5 == disable (ignore following)          disable
% 6 == kill whitespace                     nowhite
% 7 == discard previous                    back
%
% penalty: larger wins
% order: larger wins
% category:2,order:5,penalty:10000,skip:value|kw
%
% always -- obsolete
% none   -- obsolete
% outer  -- obsolete
% reset  -- obsolete
% \defineblankmethod  [\v!joinedup] {\ifvmode\nointerlineskip\fi}

% todo, in grid mode: vspacing.fixed = false

\newtoks\everybeforeblankhandling
\newtoks\everyafterblankhandling

\appendtoks
    \dosetattribute{skip-category}\plusone
    \doresetattribute{skip-order}%
    \doresetattribute{skip-penalty}%
\to \everybeforeblankhandling

\appendtoks
    \ifblankflexible \else
        \fixedblankskip
    \fi
\to \everyafterblankhandling

\def\startblankhandling{\begingroup \blankskip\zeropoint \the\everybeforeblankhandling}
\def\stopblankhandling {\the\everyafterblankhandling \vskip \blankskip \endgroup}
\def\setblankcategory#1{\dosetattribute{skip-category}{#1}}
\def\setblankorder   #1{\dosetattribute{skip-order}{#1}}
\def\setblankpenalty #1{\dosetattribute{skip-penalty}{#1}}
\def\addblankskip#1#2#3{\advance\blankskip#1\dimexpr\ifgridsnapping#3\else#2\fi\relax\relax}
\def\fixedblankskip    {\blankskip1\blankskip}
\def\flexibleblankskip {\blankskip1\blankskip\!!plus \skipgluefactor\blankskip\!!minus\skipgluefactor\blankskip}

\def\definevspacingamount
  {\dotripleempty\dodefinevspacingamount}

\def\dodefinevspacingamount[#1][#2][#3]%
  {\ctxlua{vspacing.setskip("#1",\!!bs\detokenize{#2}\!!es,\!!bs\detokenize{#3}\!!es)}}

\def\definevspacing
  {\dodoubleempty\dodefinevspacing}

\def\dodefinevspacing[#1][#2]%
  {\ctxlua{vspacing.setmap("#1","#2")}}

\def\vspacing
  {\dosingleempty\dovspacing}

\def\dovspacing[#1]%
  {\ctxlua{vspacing.analyse("\iffirstargument#1\else default\fi")}}

\definevspacingamount[\v!big]    [\bigskipamount]  [\openlineheight]
\definevspacingamount[\v!medium] [\medskipamount]  [.50\openlineheight]
\definevspacingamount[\v!small]  [\smallskipamount][.25\openlineheight]
\definevspacingamount[\v!line]   [\openlineheight] [\openlineheight]
\definevspacingamount[\v!formula][\medskipamount]  [.50\openlineheight]
\definevspacingamount[\v!white]  [\parskip]        [\openlineheight]

\definevspacing[\s!default] [\v!big]
\definevspacing[\v!halfline][.5*\v!line]
\definevspacing[\v!samepage][penalty:10000]
\definevspacing[\v!max]     [category:1]
\definevspacing[\v!force]   [category:2]
\definevspacing[\v!disable] [category:5]
\definevspacing[\v!nowhite] [category:6]
\definevspacing[\v!back]    [category:7]
\definevspacing[\v!always]  [category:0]
\definevspacing[\v!weak]    [order:0]
\definevspacing[\v!strong]  [order:100]

\defineblankmethod[\v!samepage]{\writestatus\m!systems{ignoring blank method '\v!samepage'}}
\defineblankmethod[\v!max]     {\writestatus\m!systems{ignoring blank method '\v!max'}}
\defineblankmethod[\v!weak]    {\writestatus\m!systems{ignoring blank method '\v!weak'}}
\defineblankmethod[\v!strong]  {\writestatus\m!systems{ignoring blank method '\v!strong'}}

% \definevspacing[whatever][4*big]
% \vspacing[2*big,-medium,-3*small,whatever,halfline,order:10,category:4,strong,samepage]
% \vspacing[2*big,category:disable]
% \vspacing[2*big,disable]
% \vspacing[2*big,back]

% some temporary hacks

\setfalse\vspacingenabled

% \def\dosomebreak#1%
%   {\doifoutervmode
%      {\scratchskip\lastskip
%       \removelastskip
%       #1\relax
%       \ifconditional\vspacingenabled
%         % we have collapsed so always 0pt
%         \vskip\scratchskip
%       \else\ifdim\scratchskip=\zeropoint
%         % else interference with footnotes
%       \else
%         \vskip\scratchskip
%       \fi\fi}}

% ! ! ! ! ! later, now each newline does a \par and call to the callback

\def\enablevspacing {\settrue \vspacingenabled\ctxlua{vspacing.enable()}}
\def\disablevspacing{\setfalse\vspacingenabled\ctxlua{vspacing.disable()}}

\let\setupvspacing\setupblank % for the moment

\protect \endinput

\starttext

\dorecurse{2}{
    $2^{2^{2^{2}}}$ $2_{2_{2_{2}}}^{2^{2^{2^{2^{2^{2^{2^{2^{2}}}}}}}}}$
    \input tufte \inframed {tufte}
    \par
}

\dorecurse{100} {

    \kern \recurselevel pt

    \vbox {
        \endgraf \strut first \endgraf
        {\dosetattribute{skip-category}{1}\vskip10pt}
        {\dosetattribute{skip-category}{1}\vskip40pt}
        {\dosetattribute{skip-category}{1}\vskip20pt}
        {\dosetattribute{skip-category}{2}\vskip10pt}
        \endgraf \strut second \endgraf
    }

    \endgraf \strut first \endgraf
    {\dosetattribute{skip-category}{1}\vskip10pt}
    {\dosetattribute{skip-category}{1}\vskip40pt}
    {\dosetattribute{skip-category}{1}\vskip20pt}
    {\dosetattribute{skip-category}{1}\vskip40pt}
    \endgraf \strut second \endgraf

    {\dosetattribute{skip-category}{0}\vskip10pt} % remove
    {\dosetattribute{skip-category}{1}\vskip10pt} % take largest
    {\dosetattribute{skip-category}{1}\vskip40pt}
    {\dosetattribute{skip-category}{1}\vskip40pt}
    {\dosetattribute{skip-category}{1}\vskip40pt}
    {\dosetattribute{skip-category}{1}\vskip40pt}
    {\dosetattribute{skip-category}{1}\vskip40pt}
    {\dosetattribute{skip-category}{1}\dosetattribute{skip-order}{10}\vskip20pt}
    {\dosetattribute{skip-category}{4}\dosetattribute{skip-order}{10}\vskip20pt}
    {\dosetattribute{skip-category}{1}\vskip60pt}
    {\dosetattribute{skip-category}{1}\vskip20pt}
    {\dosetattribute{skip-category}{0}\vskip10pt}

    third (no break after this)

    {\dosetattribute{skip-category}{1}\dosetattribute{skip-penalty}{100000}\vskip10pt}
    {\dosetattribute{skip-category}{1}\dosetattribute{skip-penalty}{100000}\vskip20pt}
    {\dosetattribute{skip-category}{1}\vskip10pt}
    {\dosetattribute{skip-category}{1}\vskip20pt}

    fourth
    \vskip10pt
    fifth
}

% bidi test

\definefontfeature
  [arab]
  [mode=node,language=dflt,script=arab,
   init=yes,medi=yes,fina=yes,isol=yes,
   liga=yes,dlig=yes,rlig=yes,clig=yes,
   mark=yes,mkmk=yes,kern=yes,curs=yes]

\font\Arabic=arabtype*arab at 20pt

\def\LATIN{LATIN} {\setcharactermirroring[1]} % enable this
\def\ARAB {محمد}

\startluacode
    function document.split_tokens(str)
        for s in str:bytes() do
            tex.sprint(tex.ctxcatcodes,string.format("\\hbox{\\char %s}",s))
        end
    end
\stopluacode

\def\biditest#1#2#3% font text raw
  {\dontleavehmode\hbox
    {\framed[offset=overlay]{\tttf#2}\quad
     \ctxlua{mirror.trace = true}%
     \framed[offset=overlay]{#1#3}\quad
     \ctxlua{mirror.trace = false}
     \tttf\ctxlua{document.split_tokens([[\detokenize{#3}]])}}}

\startbuffer[bidi-sample]
\biditest\Arabic{LATIN BARA}{\textdir TLT\relax   \LATIN\ \ARAB}\par
\biditest\Arabic{BARA LATIN}{\textdir TRT\relax   \LATIN\ \ARAB}\par
\biditest\Arabic{LATIN ARAB}{\textdir TLT{\bidilro \LATIN\ \ARAB}}\par % right -> left
\biditest\Arabic{LATIN ARAB}{\textdir TRT{\bidilro \LATIN\ \ARAB}}\par % right -> left
\biditest\Arabic{BARA NITAL}{\textdir TLT{\bidirlo \LATIN\ \ARAB}}\par % left -> right
\biditest\Arabic{BARA NITAL}{\textdir TRT{\bidirlo \LATIN\ \ARAB}}\par % left -> right
\stopbuffer

\startbuffer[bidi-sample]
\biditest\Arabic{LATIN BARA}{\textdir TLT\relax   \LATIN\ \ARAB}\par
\biditest\Arabic{BARA LATIN}{\textdir TRT\relax   \LATIN\ \ARAB}\par
\biditest\Arabic{LATIN ARAB}{\textdir TLT\bidilro \LATIN\ \ARAB}\par % right -> left
\biditest\Arabic{LATIN ARAB}{\textdir TRT\bidilro \LATIN\ \ARAB}\par % right -> left
\biditest\Arabic{BARA NITAL}{\textdir TLT\bidirlo \LATIN\ \ARAB}\par % left -> right
\biditest\Arabic{BARA NITAL}{\textdir TRT\bidirlo \LATIN\ \ARAB}\par % left -> right
\stopbuffer

\startbuffer[bidi-setup]
\setupdirections[bidi=off]
\stopbuffer

{\typebuffer[bidi-setup] \getbuffer[bidi-setup] \getbuffer[bidi-sample]}

\startbuffer[bidi-setup]
\setupdirections[bidi=global]
\stopbuffer

{\typebuffer[bidi-setup] \getbuffer[bidi-setup] \getbuffer[bidi-sample]}

\startbuffer[bidi-setup]
\setupdirections[bidi=local]
\stopbuffer

{\typebuffer[bidi-setup] \getbuffer[bidi-setup] \getbuffer[bidi-sample]}

\stoptext
